import { Bill } from '@/types/bill';
import { TemplateSettings } from '@/types/template';
import { generatePDF } from './pdfGenerator';

export async function shareOnWhatsApp(bill: Bill, template?: TemplateSettings): Promise<void> {
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  try {
    // Generate PDF blob for sharing
    const pdfBlob = await generatePDF(bill, true, template);
    
    if (pdfBlob && navigator.share && navigator.canShare) {
      // Create a file from the blob
      const pdfFile = new File([pdfBlob], `invoice-${bill.customerName.replace(/\s+/g, '-')}-${bill.id}.html`, {
        type: 'text/html'
      });
      
      const shareData = {
        title: `Invoice from AP1700 - ${bill.customerName}`,
        text: `Invoice #${bill.id.toUpperCase()} for ${bill.customerName} - Total: ₹${bill.total.toFixed(2)}`,
        files: [pdfFile]
      };
      
      if (navigator.canShare(shareData)) {
        await navigator.share(shareData);
        return;
      }
    }
  } catch (error) {
    console.error('Error sharing PDF:', error);
  }
  
  // Fallback to text sharing
  const message = `
🧾 *Invoice from AP1700*

👤 *Customer:* ${bill.customerName}
📅 *Date:* ${formatDate(bill.date)}
🆔 *Invoice #:* ${bill.id.toUpperCase()}
📋 *Items:* ${bill.items.length}
💰 *Total Amount:* ₹${bill.total.toFixed(2)}

${bill.description ? `📝 *Description:* ${bill.description}\n\n` : ''}*📊 Bill Details:*
${bill.items.map((item, index) => 
  `${index + 1}. ${item.text || 'Item'}\n   📏 ${item.feet}' ${item.inches}"${item.quantity ? ` × ${item.quantity}` : ''} @ ₹${item.defaultValue.toFixed(2)} = *₹${item.calculatedValue.toFixed(2)}*`
).join('\n\n')}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
💵 *TOTAL AMOUNT: ₹${bill.total.toFixed(2)}*
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📧 *Payment Details:*
• Due Date: ${formatDate(new Date(new Date(bill.date).getTime() + 30 * 24 * 60 * 60 * 1000).toISOString())}
• Payment Terms: Net 30 days
• Include Invoice # with payment

📞 *Contact Information:*
• Email: contact@ap1700.com
• Phone: +1 (555) 123-4567
• Website: www.ap1700.com

Generated by *AP1700 Professional Bill Management System*
  `.trim();

  // URL encode the message
  const encodedMessage = encodeURIComponent(message);
  
  // Create WhatsApp share URL
  const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;
  
  // Open WhatsApp in a new window/tab
  const newWindow = window.open(whatsappUrl, '_blank', 'noopener,noreferrer');
  
  // Fallback for popup blockers
  if (!newWindow) {
    // Try to copy to clipboard as fallback
    if (navigator.clipboard && navigator.clipboard.writeText) {
      navigator.clipboard.writeText(message).then(() => {
        alert('WhatsApp link was blocked by popup blocker. The message has been copied to your clipboard. You can paste it in WhatsApp manually.');
      }).catch(() => {
        // Final fallback - show the message in an alert
        alert('Unable to open WhatsApp or copy to clipboard. Here\'s the message to share manually:\n\n' + message);
      });
    } else {
      // Final fallback - show the message in an alert
      alert('Unable to open WhatsApp. Here\'s the message to share manually:\n\n' + message);
    }
  }
}

export async function shareViaWebShare(bill: Bill, template?: TemplateSettings): Promise<void> {
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  try {
    // Generate PDF blob for sharing
    const pdfBlob = await generatePDF(bill, true, template);
    
    if (pdfBlob && navigator.share && navigator.canShare) {
      // Create a file from the blob
      const pdfFile = new File([pdfBlob], `invoice-${bill.customerName.replace(/\s+/g, '-')}-${bill.id}.html`, {
        type: 'text/html'
      });
      
      const shareData = {
        title: `Invoice from AP1700 - ${bill.customerName}`,
        text: `Invoice #${bill.id.toUpperCase()} for ${bill.customerName} - Total: ₹${bill.total.toFixed(2)} - Date: ${formatDate(bill.date)}`,
        files: [pdfFile]
      };
      
      if (navigator.canShare(shareData)) {
        await navigator.share(shareData);
        return;
      }
    }
  } catch (error) {
    console.error('Error sharing PDF file:', error);
  }
  
  // Fallback to WhatsApp text sharing
  const shareData = {
    title: `Invoice from AP1700 - ${bill.customerName}`,
    text: `Invoice #${bill.id.toUpperCase()} for ${bill.customerName} - Total: ₹${bill.total.toFixed(2)} - Date: ${formatDate(bill.date)}`,
    url: window.location.href
  };

  if (navigator.share && navigator.canShare && navigator.canShare(shareData)) {
    navigator.share(shareData).catch((error) => {
      console.error('Error sharing:', error);
      // Fallback to WhatsApp
      shareOnWhatsApp(bill, template);
    });
  } else {
    // Fallback to WhatsApp
    await shareOnWhatsApp(bill, template);
  }
}